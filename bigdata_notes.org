#+LATEX_HEADER:\usepackage{amsmath}
#+LATEX_HEADER:\usepackage{amssymb}

#+TITLE: CS744: Big Data Systems Notes
#+AUTHOR: Jack Truskowski
#+STARTUP: showall

* 2.4.19 MapReduce
- Programming model
- Execution
- Runtime issues
- M-R library handles execution and run-time issues
  - Transparent to programmers

file:diagrams/masterworker.png

** Operators
1) Map
   - Input = (key,value) --> (key, <v>)
2) Reduce
   - Operates share a key
   - (key,value) is sorted and values passed to reducer

** Failures and Slowdowns
- Handled by the master
*** Possible failures
1) Map / Reduce
   - Worker fails, some maps and some reduces completed
   - Reduce data is already written to HDFS, doesn't need to be recomputed
   - Maps must be re-executed to recover intermediate data, since it hasn't been written to HDFS 


* 2.6.19 Spark
- Programming model

** RDDs
- Partitioned collection of records
- SQL, D-Streams, Graphx
- Intermediate data stored in memory
- Low overhead fault tolerance achieved through lineage
   
** Benefits
1. Speed up iterative computations
2. Load datasets into memory
   - can't be done in MapReduce

- Higher level programs

\begin{verbatim}
RDD -> transformations -> action
\end{verbatim}

- \texttt{Persist} (deserialized, serialized, on-disk)
  - RDDs only exist logically unless \texttt{persist} is called
    - Only then materialized (unless wide dependencies)

      file:diagrams/widedep.png

  - \texttt{REL} (reliable flag): checkpoint to disk or other memory locations
- Partitioning
- Lazy computation

** Example: PageRank
- General process:
  1. Gather
  2. Applies
  3. Scatter
